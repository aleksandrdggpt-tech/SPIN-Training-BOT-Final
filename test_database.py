#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ë–î.
–ó–∞–ø—É—Å–∫: python test_database.py
"""

import asyncio
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

from database import init_db, close_db, get_session
from database.repositories import UserRepository, BadgeRepository, SessionRepository
from services.database_service import DatabaseService

print("=" * 60)
print("üß™ –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• - SPIN Training Bot v4")
print("=" * 60)


async def test_database():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    print("\nüìä –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

    # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüë§ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    try:
        async with get_session() as session:
            user_repo = UserRepository(session)

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repo.get_or_create(
                telegram_id=999999999,
                username="test_user",
                first_name="Test",
                last_name="User"
            )

            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:")
            print(f"   - ID: {user.id}")
            print(f"   - Telegram ID: {user.telegram_id}")
            print(f"   - Username: {user.username}")
            print(f"   - XP: {user.total_xp}")
            print(f"   - Level: {user.level}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 3. –¢–µ—Å—Ç DatabaseService
    print("\nüîß –®–∞–≥ 3: –¢–µ—Å—Ç DatabaseService...")
    try:
        db_service = DatabaseService(bot_name="spin_bot")

        # –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await db_service.get_user_session(
            telegram_id=999999999,
            username="test_user",
            first_name="Test"
        )

        print(f"‚úÖ DatabaseService —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   - User: {user_data['user']['telegram_id']}")
        print(f"   - Session keys: {list(user_data['session'].keys())}")
        print(f"   - Stats keys: {list(user_data['stats'].keys())}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DatabaseService: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 4. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    print("\nüíæ –®–∞–≥ 4: –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
    try:
        test_session = {
            'question_count': 5,
            'clarity_level': 75,
            'chat_state': 'in_progress'
        }
        test_stats = {
            'total_trainings': 1,
            'best_score': 100
        }

        success = await db_service.save_session(
            telegram_id=999999999,
            session_data=test_session,
            stats_data=test_stats
        )

        if success:
            print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
            user_data2 = await db_service.get_user_session(telegram_id=999999999)

            if user_data2['session'] == test_session:
                print("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ùå –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 5. –¢–µ—Å—Ç XP –∏ Level
    print("\nüéÆ –®–∞–≥ 5: –¢–µ—Å—Ç –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ (XP, Level)...")
    try:
        levels_config = [
            {"level": 1, "min_xp": 0},
            {"level": 2, "min_xp": 100},
            {"level": 3, "min_xp": 300}
        ]

        result = await db_service.add_xp_and_check_level_up(
            telegram_id=999999999,
            xp_to_add=150,
            levels_config=levels_config
        )

        print(f"‚úÖ XP –¥–æ–±–∞–≤–ª–µ–Ω:")
        print(f"   - Leveled up: {result['leveled_up']}")
        print(f"   - Old level: {result['old_level']}")
        print(f"   - New level: {result['new_level']}")
        print(f"   - Total XP: {result['total_xp']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ XP/Level: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 6. –¢–µ—Å—Ç –±–µ–π–¥–∂–µ–π
    print("\nüèÜ –®–∞–≥ 6: –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–π–¥–∂–µ–π...")
    try:
        awarded = await db_service.award_badge(
            telegram_id=999999999,
            badge_type="test_badge",
            metadata={"score": 185, "test": True}
        )

        if awarded:
            print("‚úÖ –ë–µ–π–¥–∂ –≤—ã–¥–∞–Ω")
        else:
            print("‚ö†Ô∏è  –ë–µ–π–¥–∂ —É–∂–µ –±—ã–ª –≤—ã–¥–∞–Ω")

        # –ü–æ–ª—É—á–∏—Ç—å –±–µ–π–¥–∂–∏
        badges = await db_service.get_user_badges(telegram_id=999999999)
        print(f"‚úÖ –í—Å–µ–≥–æ –±–µ–π–¥–∂–µ–π: {len(badges)}")
        for badge in badges:
            print(f"   - {badge['badge_type']} (from {badge['earned_in_bot']})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–π–¥–∂–µ–π: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 7. –¢–µ—Å—Ç TrainingHistory
    print("\nüìö –®–∞–≥ 7: –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
    try:
        success = await db_service.save_training_history(
            telegram_id=999999999,
            total_score=185,
            clarity_level=92,
            question_count=8,
            contextual_questions=3,
            per_type_counts={"situation": 2, "problem": 3, "implication": 2, "need_payoff": 1},
            case_data={"client": "TestCorp", "product": "CRM"},
            session_snapshot={"test": True},
            scenario_name="test_scenario"
        )

        if success:
            print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

            # –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
            history = await db_service.get_user_training_history(telegram_id=999999999, limit=5)
            print(f"‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
            if history:
                print(f"   - –ü–æ—Å–ª–µ–¥–Ω—è—è: {history[0]['total_score']} –±–∞–ª–ª–æ–≤")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüìä –®–∞–≥ 8: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î...")
    try:
        async with get_session() as session:
            user_repo = UserRepository(session)
            total_users = await user_repo.count_total_users()
            print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {total_users}")

            if total_users > 0:
                leaderboard = await user_repo.get_leaderboard(limit=5)
                print(f"‚úÖ –¢–æ–ø-5 –ø–æ XP:")
                for i, user in enumerate(leaderboard, 1):
                    print(f"   {i}. User {user.telegram_id}: {user.total_xp} XP, Level {user.level}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ë–î
    print("\nüîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î...")
    try:
        await close_db()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")

    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")

    success = await test_database()

    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ bot.py")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π 'python bot.py'")
        return 0
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("=" * 60)
        print("\n‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
