"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è –≤ SPIN Training Bot.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from config import Config
from services.llm_service import LLMService
from services.user_service import UserService
from services.achievement_service import AchievementService
from services.training_service import TrainingService

from engine.scenario_loader import ScenarioLoader
from engine.question_analyzer import QuestionAnalyzer
from engine.report_generator import ReportGenerator
from engine.case_generator import CaseGenerator

from modules.active_listening import ActiveListeningDetector, ActiveListeningConfig


async def test_active_listening_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è."""

    print("=" * 60)
    print("–¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ê–ö–¢–ò–í–ù–û–ì–û –°–õ–£–®–ê–ù–ò–Ø")
    print("=" * 60)

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print("\n‚úì Test 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    config = Config()
    llm_service = LLMService()
    user_service = UserService()
    achievement_service = AchievementService()

    scenario_loader = ScenarioLoader()
    question_analyzer = QuestionAnalyzer()
    report_generator = ReportGenerator()

    active_listening_config = ActiveListeningConfig(
        enabled=True,
        use_llm=False,  # –ë–µ–∑ LLM –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        bonus_points=5,
        emoji="üëÇ",
        language="ru"
    )
    active_listening_detector = ActiveListeningDetector(active_listening_config)

    loaded_scenario = scenario_loader.load_scenario(config.SCENARIO_PATH)
    scenario_config = loaded_scenario.config
    case_generator = CaseGenerator(scenario_config['case_variants'])

    training_service = TrainingService(
        user_service=user_service,
        llm_service=llm_service,
        achievement_service=achievement_service,
        question_analyzer=question_analyzer,
        report_generator=report_generator,
        case_generator=case_generator,
        scenario_loader=scenario_loader,
        active_listening_detector=active_listening_detector
    )

    print("  ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–µ—Ä–≤–∏—Å
    print("\n‚úì Test 2: –î–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –≤ TrainingService")
    assert training_service.active_listening_detector is not None
    print("  ‚úÖ active_listening_detector –Ω–∞–π–¥–µ–Ω")

    # 3. –¢–µ—Å—Ç format_badge()
    print("\n‚úì Test 3: –ú–µ—Ç–æ–¥ format_badge()")
    badge = training_service.active_listening_detector.format_badge()
    expected = " üëÇ (–£—Å–ø–µ—à–Ω–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ)"
    assert badge == expected, f"Expected '{expected}', got '{badge}'"
    print(f"  ‚úÖ format_badge() = \"{badge}\"")

    # 4. –¢–µ—Å—Ç get_bonus_points()
    print("\n‚úì Test 4: –ú–µ—Ç–æ–¥ get_bonus_points()")
    bonus = training_service.active_listening_detector.get_bonus_points()
    assert bonus == 5
    print(f"  ‚úÖ get_bonus_points() = {bonus}")

    # 5. –¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞, –±–µ–∑ LLM)
    print("\n‚úì Test 5: –î–µ—Ç–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)")

    # 5.1: –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    result = await training_service.active_listening_detector.check_context_usage(
        question="–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?",
        last_response="",
        call_llm_func=None
    )
    assert result == False
    print("  ‚úÖ –ë–µ–∑ last_response: False")

    # 5.2: –° —á–∏—Å–ª–æ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    result = await training_service.active_listening_detector.check_context_usage(
        question="–í—ã —Å–∫–∞–∑–∞–ª–∏ 50 —á–µ–ª–æ–≤–µ–∫. –°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö?",
        last_response="–£ –Ω–∞—Å 50 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
        call_llm_func=None
    )
    assert result == True
    print("  ‚úÖ –° —á–∏—Å–ª–æ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: True")

    # 5.3: –° –º–∞—Ä–∫–µ—Ä–æ–º
    result = await training_service.active_listening_detector.check_context_usage(
        question="–ö–∞–∫ –≤—ã —Å–∫–∞–∑–∞–ª–∏, —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π?",
        last_response="–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π.",
        call_llm_func=None
    )
    assert result == True
    print("  ‚úÖ –° –º–∞—Ä–∫–µ—Ä–æ–º '–∫–∞–∫ –≤—ã —Å–∫–∞–∑–∞–ª–∏': True")

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ QuestionAnalyzer
    print("\n‚úì Test 6: –°—Ç–∞—Ä—ã–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ QuestionAnalyzer")
    assert not hasattr(question_analyzer, 'check_context_usage_fallback'), \
        "check_context_usage_fallback() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω"
    print("  ‚úÖ check_context_usage_fallback() —É–¥–∞–ª–µ–Ω")

    # 7. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow (–∏–º–∏—Ç–∞—Ü–∏—è)
    print("\n‚úì Test 7: –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞")

    user_id = 12345
    user_data = user_service.get_user_data(user_id)
    session = user_data['session']

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    session['last_client_response'] = "–£ –Ω–∞—Å –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞ 100 —á–µ–ª–æ–≤–µ–∫."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    question = "–í—ã —Å–∫–∞–∑–∞–ª–∏ 100 —á–µ–ª–æ–≤–µ–∫. –°–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö?"

    is_contextual = await training_service.active_listening_detector.check_context_usage(
        question=question,
        last_response=session['last_client_response'],
        call_llm_func=None
    )

    assert is_contextual == True
    print(f"  ‚úÖ –í–æ–ø—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π: {is_contextual}")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
    if is_contextual:
        session['contextual_questions'] = session.get('contextual_questions', 0) + 1
        bonus_points = training_service.active_listening_detector.get_bonus_points()
        session['clarity_level'] = min(100, session.get('clarity_level', 0) + bonus_points)
        context_badge = training_service.active_listening_detector.format_badge()

        print(f"  ‚úÖ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω: +{bonus_points} –æ—á–∫–æ–≤")
        print(f"  ‚úÖ –ë–µ–π–¥–∂: \"{context_badge}\"")
        print(f"  ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {session['contextual_questions']}")
        print(f"  ‚úÖ Clarity level: {session['clarity_level']}")

    print("\n" + "=" * 60)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    print("=" * 60)
    print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–∞!")
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  ‚Ä¢ –î–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ TrainingService")
    print(f"  ‚Ä¢ –ë–µ–π–¥–∂ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å —Ç–µ–∫—Å—Ç–æ–º: \"{badge}\"")
    print(f"  ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏: {bonus}")
    print(f"  ‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"  ‚Ä¢ –°—Ç–∞—Ä—ã–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ QuestionAnalyzer")
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –±–æ—Ç–µ!\n")


if __name__ == "__main__":
    asyncio.run(test_active_listening_integration())
