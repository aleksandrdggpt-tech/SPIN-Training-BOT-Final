"""
UserService —Å PostgreSQL/SQLAlchemy –ë–î.

–ê–¥–∞–ø—Ç–µ—Ä –Ω–∞–¥ DatabaseService –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UserServicePersistent API.
–≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PostgreSQL –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è bot.py.
"""

import logging
from typing import Dict, Any
import asyncio
import nest_asyncio

from .database_service import DatabaseService

logger = logging.getLogger(__name__)


class UserServiceDB:
    """
    UserService —Å –ë–î, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å UserServicePersistent API.

    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å - –∞–¥–∞–ø—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π:
    1. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ –∂–µ –º–µ—Ç–æ–¥—ã, —á—Ç–æ –∏ UserServicePersistent
    2. –í–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DatabaseService
    3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç sync –≤—ã–∑–æ–≤—ã –≤ async (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    """

    def __init__(self, bot_name: str = "spin_bot"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            bot_name: –ò–º—è –±–æ—Ç–∞ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        self.db_service = DatabaseService(bot_name=bot_name)
        logger.info(f"UserServiceDB initialized with bot_name={bot_name}")

    def _run_async(self, coro):
        """
        Helper –¥–ª—è –∑–∞–ø—É—Å–∫–∞ async —Ñ—É–Ω–∫—Ü–∏–π –≤ sync –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç nest_asyncio –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö event loops.
        
        Args:
            coro: Coroutine to run

        Returns:
            Result of coroutine
        """
        # –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö run()
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–∞—Ç—á–∏–º asyncio
        nest_asyncio.apply()
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run()
            # nest_asyncio –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å —ç—Ç–æ –¥–∞–∂–µ –≤ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º loop
            return asyncio.run(coro)
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º asyncio –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, nest_asyncio –æ–±—ã—á–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)
            pass

    def get_user_data(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π session/stats.

        Args:
            user_id: Telegram user ID

        Returns:
            dict with 'session' and 'stats' keys
        """
        result = self._run_async(self.db_service.get_user_session(user_id))

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç DatabaseService -> UserServicePersistent —Ñ–æ—Ä–º–∞—Ç
        return {
            'session': result['session'],
            'stats': result['stats']
        }
    
    def save_user_data(self, user_id: int, session_data: Dict[str, Any], stats_data: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: Telegram user ID
            session_data: Session data
            stats_data: Stats data
        """
        self._run_async(self.db_service.save_session(user_id, session_data, stats_data))

    def reset_session(self, user_id: int, scenario_config: Dict[str, Any]) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞.

        Args:
            user_id: Telegram user ID
            scenario_config: Scenario configuration
        """
        # Get current data
        user_data = self.get_user_data(user_id)

        # Reset session to default
        user_data['session'] = {
            'question_count': 0,
            'clarity_level': 0,
            'per_type_counts': {t['id']: 0 for t in scenario_config['question_types']},
            'client_case': '',
            'case_data': None,
            'last_question_type': '',
            'chat_state': 'waiting_start',
            'contextual_questions': 0,
            'last_client_response': '',
            'context_streak': 0
        }

        # Save back
        self._run_async(self.db_service.save_session(
            user_id,
            user_data['session'],
            user_data['stats']
        ))

        logger.info(f"Reset session for user {user_id}")

    def update_stats(self, user_id: int, session_score: int, scenario_config: Dict[str, Any]) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.

        Args:
            user_id: Telegram user ID
            session_score: Score from completed session
            scenario_config: Scenario configuration
        """
        # Get current data
        user_data = self.get_user_data(user_id)
        s = user_data['session']
        st = user_data['stats']

        # Update stats
        st['total_trainings'] = st.get('total_trainings', 0) + 1
        st['total_questions'] = st.get('total_questions', 0) + int(s.get('question_count', 0))
        st['best_score'] = max(int(st.get('best_score', 0)), int(session_score))

        from datetime import datetime
        st['last_training_date'] = datetime.now().isoformat()

        # XP and level
        st['total_xp'] = st.get('total_xp', 0) + session_score
        old_level = st.get('current_level', 1)

        # Calculate new level using DatabaseService
        level_result = self._run_async(
            self.db_service.add_xp_and_check_level_up(
                user_id,
                session_score,
                scenario_config.get('ranking', {}).get('levels', [])
            )
        )

        new_level = level_result['new_level']
        st['current_level'] = new_level

        # Maestro streak
        if session_score >= 221:
            st['maestro_streak'] = st.get('maestro_streak', 0) + 1
        else:
            st['maestro_streak'] = 0

        # Level up notification
        if new_level > old_level:
            st['level_up_notification'] = {
                'should_show': True,
                'old_level': old_level,
                'new_level': new_level
            }
            logger.info(f"üéä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å: {old_level} ‚Üí {new_level}")

        # Save updated stats
        self._run_async(self.db_service.save_session(
            user_id,
            user_data['session'],
            st
        ))

        # Save training history
        self._run_async(self.db_service.save_training_history(
            telegram_id=user_id,
            total_score=session_score,
            clarity_level=s.get('clarity_level', 0),
            question_count=s.get('question_count', 0),
            contextual_questions=s.get('contextual_questions', 0),
            per_type_counts=s.get('per_type_counts', {}),
            case_data=s.get('case_data'),
            session_snapshot=s,
            scenario_name=scenario_config.get('id', 'unknown')
        ))

        # Update user-level stats
        self._run_async(self.db_service.update_user_stats_after_training(
            user_id,
            session_score,
            scenario_config
        ))

        logger.info(f"Updated stats for user {user_id}, score: {session_score}")

    def get_user_by_id(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).

        Args:
            user_id: Telegram user ID

        Returns:
            User data
        """
        return self.get_user_data(user_id)

    def has_user(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

        Args:
            user_id: Telegram user ID

        Returns:
            True if user exists
        """
        try:
            self.get_user_data(user_id)
            return True
        except Exception:
            return False

    def get_all_users(self) -> Dict[int, Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).

        Note: This is not efficient for large databases.
        Use DatabaseService.get_leaderboard() instead.

        Returns:
            Dict of user_id -> user_data
        """
        logger.warning("get_all_users() is not efficient with database storage")
        return {}

    def save_now(self) -> None:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).

        –° –ë–î –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É.
        """
        logger.info("save_now() called (no-op with database storage)")
        pass
