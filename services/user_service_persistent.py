"""
UserService —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ JSON —Ñ–∞–π–ª.

–ü—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏.
–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º UserService.
"""

import logging
import json
from datetime import datetime
from typing import Dict, Any
from pathlib import Path

logger = logging.getLogger(__name__)


class UserServicePersistent:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ JSON.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏.
    """

    def __init__(self, data_file: str = "users_data.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            data_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        self.data_file = Path(data_file)
        self._user_data: Dict[int, Dict[str, Any]] = {}
        self._load_from_file()

    def _load_from_file(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞."""
        if self.data_file.exists():
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
                    self._user_data = {int(k): v for k, v in data.items()}
                logger.info(f"Loaded {len(self._user_data)} users from {self.data_file}")
            except Exception as e:
                logger.error(f"Error loading user data: {e}")
                self._user_data = {}
        else:
            logger.info(f"No existing data file {self.data_file}, starting fresh")

    def _save_to_file(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.data_file.parent.mkdir(parents=True, exist_ok=True)

            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self._user_data, f, indent=2, ensure_ascii=False)
            logger.debug(f"Saved {len(self._user_data)} users to {self.data_file}")
        except Exception as e:
            logger.error(f"Error saving user data: {e}")

    def get_user_data(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π session/stats."""
        if user_id not in self._user_data:
            self._user_data[user_id] = self._init_user_data()
            self._save_to_file()
            logger.info(f"Created new user: {user_id}")
        return self._user_data[user_id]

    def _init_user_data(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return {
            'session': {
                'question_count': 0,
                'clarity_level': 0,
                'per_type_counts': {},
                'client_case': '',
                'case_data': None,
                'last_question_type': '',
                'chat_state': 'new',
                'contextual_questions': 0,
                'last_client_response': '',
                'context_streak': 0
            },
            'stats': {
                'total_trainings': 0,
                'total_questions': 0,
                'best_score': 0,
                'total_xp': 0,
                'current_level': 1,
                'achievements_unlocked': [],
                'level_up_notification': {
                    'should_show': False,
                    'old_level': 1,
                    'new_level': 1
                },
                'maestro_streak': 0,
                'last_training_date': None,
                'recent_cases': []
            }
        }

    def reset_session(self, user_id: int, scenario_config: Dict[str, Any]) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞."""
        u = self.get_user_data(user_id)
        u['session'] = {
            'question_count': 0,
            'clarity_level': 0,
            'per_type_counts': {t['id']: 0 for t in scenario_config['question_types']},
            'client_case': '',
            'case_data': None,
            'last_question_type': '',
            'chat_state': 'waiting_start',
            'contextual_questions': 0,
            'last_client_response': '',
            'context_streak': 0
        }
        self._save_to_file()
        logger.info(f"Reset session for user {user_id}")

    def update_stats(self, user_id: int, session_score: int, scenario_config: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        u = self.get_user_data(user_id)
        s = u['session']
        st = u['stats']

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st['total_trainings'] += 1
        st['total_questions'] += int(s.get('question_count', 0))
        st['best_score'] = max(int(st.get('best_score', 0)), int(session_score))
        st['last_training_date'] = datetime.now().isoformat()

        # XP –∏ —É—Ä–æ–≤–µ–Ω—å
        st['total_xp'] = int(st.get('total_xp', 0)) + int(session_score)
        old_level = int(st.get('current_level', 1))
        new_level = self._calculate_level(int(st['total_xp']), scenario_config.get('ranking', {}).get('levels', []))
        st['current_level'] = new_level

        # –°–µ—Ä–∏—è –ú–∞—ç—Å—Ç—Ä–æ
        if int(session_score) >= 221:
            st['maestro_streak'] = int(st.get('maestro_streak', 0)) + 1
        else:
            st['maestro_streak'] = 0

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if new_level > old_level:
            st['level_up_notification'] = {
                'should_show': True,
                'old_level': old_level,
                'new_level': new_level
            }
            logger.info(f"üéä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å: {old_level} ‚Üí {new_level}")

        self._save_to_file()
        logger.info(f"Updated stats for user {user_id}, score: {session_score}")

    def _calculate_level(self, xp: int, levels: list) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ XP."""
        try:
            eligible = [int(l.get('level', 1)) for l in levels if xp >= int(l.get('min_xp', 0))]
            return max(eligible) if eligible else 1
        except Exception:
            return 1

    def get_user_by_id(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
        return self.get_user_data(user_id)

    def has_user(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
        return user_id in self._user_data

    def get_all_users(self) -> Dict[int, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)."""
        return self._user_data.copy()

    def save_now(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–ø–æ–ª–µ–∑–Ω–æ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º)."""
        self._save_to_file()
        logger.info("Forced save completed")
