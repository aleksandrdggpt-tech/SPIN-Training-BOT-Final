"""
–¢–µ—Å—Ç UserServiceDB - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î.
"""

import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from services.user_service_db_simple import UserServiceDB
from database import init_db
from config import Config


async def test_user_service_db():
    """–¢–µ—Å—Ç UserServiceDB."""

    print("=" * 60)
    print("–¢–ï–°–¢ USER SERVICE –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
    print("=" * 60)

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    print("\n‚úì Test 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î")
    await init_db()
    print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ UserServiceDB
    print("\n‚úì Test 2: –°–æ–∑–¥–∞–Ω–∏–µ UserServiceDB")
    user_service = UserServiceDB()
    print("  ‚úÖ UserServiceDB —Å–æ–∑–¥–∞–Ω")

    # 3. –¢–µ—Å—Ç get_user_data (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    print("\n‚úì Test 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    test_user_id = 123456
    user_data = await user_service.get_user_data(test_user_id)

    assert 'session' in user_data
    assert 'stats' in user_data
    assert user_data['session']['question_count'] == 0
    assert user_data['stats']['total_trainings'] == 0
    print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} —Å–æ–∑–¥–∞–Ω")
    print(f"  ‚úÖ session: {list(user_data['session'].keys())[:3]}...")
    print(f"  ‚úÖ stats: {list(user_data['stats'].keys())[:3]}...")

    # 4. –¢–µ—Å—Ç has_user
    print("\n‚úì Test 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    exists = await user_service.has_user(test_user_id)
    assert exists == True
    print(f"  ‚úÖ has_user({test_user_id}): {exists}")

    not_exists = await user_service.has_user(999999)
    assert not_exists == False
    print(f"  ‚úÖ has_user(999999): {not_exists}")

    # 5. –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö session
    print("\n‚úì Test 5: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö session")
    user_data['session']['question_count'] = 5
    user_data['session']['clarity_level'] = 50
    user_data['session']['contextual_questions'] = 2
    await user_service.save_user_data(test_user_id, user_data)
    print(f"  ‚úÖ –ò–∑–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: question_count=5, clarity_level=50, contextual_questions=2")

    # 6. –¢–µ—Å—Ç update_stats
    print("\n‚úì Test 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    from engine.scenario_loader import ScenarioLoader

    config = Config()
    scenario_loader = ScenarioLoader()
    loaded_scenario = scenario_loader.load_scenario(config.SCENARIO_PATH)
    scenario_config = loaded_scenario.config

    session_score = 100
    await user_service.update_stats(test_user_id, session_score, scenario_config)
    print(f"  ‚úÖ update_stats() –≤—ã–∑–≤–∞–Ω —Å score={session_score}")

    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\n‚úì Test 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    user_service.clear_cache()  # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î
    user_data_after = await user_service.get_user_data(test_user_id)

    assert user_data_after['stats']['total_trainings'] == 1
    assert user_data_after['stats']['total_questions'] == 5  # question_count –∏–∑ session
    assert user_data_after['stats']['best_score'] == 100
    assert user_data_after['stats']['total_xp'] == 100
    print(f"  ‚úÖ total_trainings: {user_data_after['stats']['total_trainings']}")
    print(f"  ‚úÖ total_questions: {user_data_after['stats']['total_questions']}")
    print(f"  ‚úÖ best_score: {user_data_after['stats']['best_score']}")
    print(f"  ‚úÖ total_xp: {user_data_after['stats']['total_xp']}")

    # 8. –¢–µ—Å—Ç reset_session
    print("\n‚úì Test 8: –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏")
    await user_service.reset_session(test_user_id, scenario_config)
    user_service.clear_cache()
    user_data_reset = await user_service.get_user_data(test_user_id)

    assert user_data_reset['session']['question_count'] == 0
    assert user_data_reset['session']['clarity_level'] == 0
    assert user_data_reset['session']['chat_state'] == 'waiting_start'
    print(f"  ‚úÖ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
    print(f"  ‚úÖ question_count: {user_data_reset['session']['question_count']}")
    print(f"  ‚úÖ chat_state: {user_data_reset['session']['chat_state']}")

    # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ù–ï —Å–±—Ä–æ—Å–∏–ª–∞—Å—å
    print("\n‚úì Test 9: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –ø–æ—Å–ª–µ reset_session")
    assert user_data_reset['stats']['total_trainings'] == 1
    assert user_data_reset['stats']['best_score'] == 100
    print(f"  ‚úÖ total_trainings: {user_data_reset['stats']['total_trainings']}")
    print(f"  ‚úÖ best_score: {user_data_reset['stats']['best_score']}")

    # 10. –¢–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–æ—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º)
    print("\n‚úì Test 10: –¢–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–±–µ–∑ –∫—ç—à–∞)")
    user_service.clear_cache()

    user_data_from_db = await user_service.get_user_data(test_user_id)
    assert user_data_from_db['stats']['total_trainings'] == 1
    assert user_data_from_db['stats']['best_score'] == 100
    print(f"  ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î (–∫—ç—à –æ—á–∏—â–µ–Ω)")
    print(f"  ‚úÖ total_trainings: {user_data_from_db['stats']['total_trainings']}")

    # 11. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n‚úì Test 11: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    test_user_id_2 = 654321
    user_data_2 = await user_service.get_user_data(test_user_id_2)
    assert user_data_2['stats']['total_trainings'] == 0
    print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id_2} —Å–æ–∑–¥–∞–Ω")

    print("\n" + "=" * 60)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    print("=" * 60)
    print("\nüéâ UserServiceDB —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î")
    print("  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞")
    print("  ‚Ä¢ –°–µ—Å—Å–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("  ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è")
    print("  ‚Ä¢ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å)")
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ bot.py!\n")


if __name__ == "__main__":
    asyncio.run(test_user_service_db())
