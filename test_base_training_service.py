"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å BaseTrainingService –∏ SpinTrainingService.
"""

import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from config import Config
from services import (
    BaseTrainingService,
    SpinTrainingService,
    LLMService,
    UserService,
    AchievementService
)

from engine.scenario_loader import ScenarioLoader
from engine.question_analyzer import QuestionAnalyzer
from engine.report_generator import ReportGenerator
from engine.case_generator import CaseGenerator

from modules.active_listening import ActiveListeningDetector, ActiveListeningConfig


async def test_base_training_service():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã."""

    print("=" * 60)
    print("–¢–ï–°–¢ –ú–û–î–£–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    print("\n‚úì Test 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    config = Config()
    llm_service = LLMService()
    user_service = UserService()
    achievement_service = AchievementService()
    print("  ‚úÖ –ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPIN-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\n‚úì Test 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPIN-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    scenario_loader = ScenarioLoader()
    question_analyzer = QuestionAnalyzer()
    report_generator = ReportGenerator()

    loaded_scenario = scenario_loader.load_scenario(config.SCENARIO_PATH)
    scenario_config = loaded_scenario.config
    case_generator = CaseGenerator(scenario_config['case_variants'])
    print("  ‚úÖ SPIN-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è active listening
    print("\n‚úì Test 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Active Listening")
    active_listening_config = ActiveListeningConfig(
        enabled=True,
        use_llm=False,
        bonus_points=5,
        emoji="üëÇ",
        language="ru"
    )
    active_listening_detector = ActiveListeningDetector(active_listening_config)
    print("  ‚úÖ Active Listening –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ SpinTrainingService
    print("\n‚úì Test 4: –°–æ–∑–¥–∞–Ω–∏–µ SpinTrainingService")
    spin_service = SpinTrainingService(
        user_service=user_service,
        llm_service=llm_service,
        achievement_service=achievement_service,
        question_analyzer=question_analyzer,
        report_generator=report_generator,
        case_generator=case_generator,
        scenario_loader=scenario_loader,
        active_listening_detector=active_listening_detector
    )
    print("  ‚úÖ SpinTrainingService —Å–æ–∑–¥–∞–Ω")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    print("\n‚úì Test 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç BaseTrainingService")
    assert isinstance(spin_service, BaseTrainingService)
    assert isinstance(spin_service, SpinTrainingService)
    print("  ‚úÖ SpinTrainingService –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç BaseTrainingService")

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ (–∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞)
    print("\n‚úì Test 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤")
    assert hasattr(spin_service, 'check_active_listening')
    assert hasattr(spin_service, 'apply_active_listening_bonus')
    assert hasattr(spin_service, 'get_feedback')
    assert hasattr(spin_service, 'check_training_completion')
    assert hasattr(spin_service, 'get_user_data')
    assert hasattr(spin_service, 'reset_session')
    assert hasattr(spin_service, 'update_stats')
    print("  ‚úÖ –í—Å–µ –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã")

    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ SPIN-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    print("\n‚úì Test 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ SPIN-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
    assert hasattr(spin_service, 'start_training')
    assert hasattr(spin_service, 'process_question')
    assert hasattr(spin_service, 'build_feedback_prompt')
    assert hasattr(spin_service, 'complete_training')
    print("  ‚úÖ –í—Å–µ SPIN-–º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã")

    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ SPIN-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\n‚úì Test 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ SPIN-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Ä–≤–∏—Å–µ")
    assert spin_service.question_analyzer is not None
    assert spin_service.report_generator is not None
    assert spin_service.case_generator is not None
    assert spin_service.scenario_loader is not None
    print("  ‚úÖ –í—Å–µ SPIN-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")

    # 9. –¢–µ—Å—Ç –æ–±—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ check_active_listening
    print("\n‚úì Test 9: –¢–µ—Å—Ç –æ–±—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ check_active_listening")
    is_contextual, badge = await spin_service.check_active_listening(
        question="–í—ã —Å–∫–∞–∑–∞–ª–∏ 100 —á–µ–ª–æ–≤–µ–∫. –°–∫–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö?",
        last_response="–£ –Ω–∞—Å 100 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
    )
    assert is_contextual == True
    assert badge == " üëÇ (–£—Å–ø–µ—à–Ω–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ)"
    print(f"  ‚úÖ check_active_listening() —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print(f"  ‚úÖ is_contextual: {is_contextual}")
    print(f"  ‚úÖ badge: \"{badge}\"")

    # 10. –¢–µ—Å—Ç –æ–±—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ check_training_completion
    print("\n‚úì Test 10: –¢–µ—Å—Ç check_training_completion")
    user_id = 99999
    user_data = user_service.get_user_data(user_id)
    session = user_data['session']

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    session['question_count'] = 20
    is_completed, reason = spin_service.check_training_completion(user_id, scenario_config)
    assert is_completed == True
    assert reason == "max_questions"
    print(f"  ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ max_questions")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —è—Å–Ω–æ—Å—Ç–∏
    user_id_2 = 99998
    user_data_2 = user_service.get_user_data(user_id_2)
    session_2 = user_data_2['session']
    session_2['question_count'] = 7  # >= min_questions_for_completion (5), < max_questions (10)
    session_2['clarity_level'] = 80  # >= target_clarity (80)
    is_completed, reason = spin_service.check_training_completion(user_id_2, scenario_config)
    assert is_completed == True
    assert reason == "clarity_reached", f"Expected 'clarity_reached', got '{reason}'"
    print(f"  ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ clarity_reached")

    # 11. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π
    print("\n‚úì Test 11: BaseTrainingService ‚Äî –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å")
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–∞ —É–ø–∞—Å—Ç—å
        base = BaseTrainingService(
            user_service=user_service,
            llm_service=llm_service,
            achievement_service=achievement_service,
            active_listening_detector=active_listening_detector
        )
        # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥
        await base.start_training(123, {})
        print("  ‚ùå BaseTrainingService –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é!")
        assert False
    except TypeError:
        print("  ‚úÖ BaseTrainingService –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π (TypeError –ø—Ä–∏ –≤—ã–∑–æ–≤–µ)")
    except Exception as e:
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ABC
        if "abstract" in str(e).lower() or "cannot instantiate" in str(e).lower():
            print(f"  ‚úÖ BaseTrainingService –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π")
        else:
            print(f"  ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    print("\n" + "=" * 60)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    print("=" * 60)
    print("\nüéâ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("  ‚Ä¢ BaseTrainingService —Å–æ–∑–¥–∞–Ω —Å –æ–±—â–µ–π –ª–æ–≥–∏–∫–æ–π")
    print("  ‚Ä¢ SpinTrainingService –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ")
    print("  ‚Ä¢ –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
    print("  ‚Ä¢ SPIN-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
    print("  ‚Ä¢ Active listening –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –±–æ—Ç–æ–≤!")
    print("   (Challenger Sale, MEDDIC, Objection Handling, –∏ —Ç.–¥.)\n")


if __name__ == "__main__":
    asyncio.run(test_base_training_service())
