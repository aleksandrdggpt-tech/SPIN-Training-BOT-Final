from typing import Any, Dict, List


class ReportGenerator:
    """Generates complete final report with all sections."""

    def get_badge(self, score: int, badges: List[Dict[str, Any]]) -> str:
        for b in badges:
            min_score = int(b.get("min_score", 0))
            max_score = int(b.get("max_score", 999999))
            if min_score <= score <= max_score:
                name = b.get("name", "")
                emoji = b.get("emoji", "")
                return f"{emoji} {name}".strip()
        return ""

    def get_recommendations(self, user_stats: Dict[str, Any], config: Dict[str, Any]) -> List[str]:
        recs: List[str] = []
        per_type = user_stats.get("per_type_counts", {})
        clarity = int(user_stats.get("clarity_level", 0))

        # Basic heuristics similar to the legacy implementation
        if per_type.get("situational", 0) > (per_type.get("problem", 0) or 0) * 2:
            recs.append("‚Ä¢ –°–æ–∫—Ä–∞—â–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        if (per_type.get("problem", 0) or 0) == 0:
            recs.append("‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π")
        if (per_type.get("implication", 0) or 0) == 0:
            recs.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–≤–ª–µ–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–±–ª–µ–º")
        if (per_type.get("need_payoff", 0) or 0) == 0:
            recs.append("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤—ã–≥–æ–¥ —Ä–µ—à–µ–Ω–∏—è")
        if clarity < 50:
            recs.append("‚Ä¢ –ì–ª—É–±–∂–µ –∏—Å—Å–ª–µ–¥—É–π—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")

        if not recs:
            recs.append("‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return recs

    def generate_final_report(self, data: Dict[str, Any], config: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ü–û–õ–ù–´–ô —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ –≤—Å–µ–º–∏ —Å–µ–∫—Ü–∏—è–º–∏."""
        sections = []
        
        # 1. –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        sections.append(self._format_basic_results(data, config))
        
        # 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ–π—Å–µ
        if data.get('case_data'):
            sections.append(self._format_case_info(data['case_data']))
        
        # 3. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        sections.append(self._format_overall_stats(data['stats']))
        
        # 4. –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ
        sections.append(self._format_listening_stats(data['session']))
        
        # 5. –†–∞–Ω–≥ –∏ XP
        sections.append(self._format_rank_info(data['stats'], config))
        
        # 6. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        level_up = data.get('level_up')
        if level_up and level_up.get('should_show'):
            sections.append(self._format_level_up(level_up, config))
        
        # 7. –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if data.get('achievements'):
            sections.append(self._format_achievements(data['achievements']))
        
        # 8. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é + –ø—Ä–æ–º–æ
        sections.append(self._format_footer(config))
        
        return "\n\n".join(sections)

    def _format_basic_results(self, data: Dict[str, Any], config: Dict[str, Any]) -> str:
        """–ë–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
        session = data['session']
        scoring = config.get("scoring", {})
        badges = scoring.get("badges", [])
        total_score = int(data.get('total_score', 0))

        badge = self.get_badge(total_score, badges)
        recs = self.get_recommendations(session, config)

        lines: List[str] = []
        lines.append("üèÅ –¢–†–ï–ù–ò–†–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        lines.append("")
        lines.append("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        lines.append(f"–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {session.get('question_count', 0)}/{config['game_rules']['max_questions']}")
        lines.append(f"–£—Ä–æ–≤–µ–Ω—å —è—Å–Ω–æ—Å—Ç–∏: {session.get('clarity_level', 0)}%")
        lines.append("")
        lines.append("üìà –ü–û –¢–ò–ü–ê–ú:")

        per_type_counts = session.get("per_type_counts", {})
        type_names = {t["id"]: t.get("name", t["id"]) for t in config.get("question_types", [])}
        type_emojis = {t["id"]: t.get("emoji", "") for t in config.get("question_types", [])}
        for tid, count in per_type_counts.items():
            name = type_names.get(tid, tid)
            emoji = type_emojis.get(tid, "")
            lines.append(f"{emoji} {name}: {count}")

        lines.append("")
        lines.append(f"üèÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {badge}")
        lines.append(f"–û–±—â–∏–π –±–∞–ª–ª: {total_score}")
        lines.append("")
        lines.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        lines.append("\n".join(recs))

        return "\n".join(lines)

    def _format_case_info(self, case_data: Dict[str, Any]) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ–π—Å–µ."""
        return f"""üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ï–ô–°–ï:
–î–æ–ª–∂–Ω–æ—Å—Ç—å: {case_data['position']}
–ö–æ–º–ø–∞–Ω–∏—è: {case_data['company']['type']}
–ü—Ä–æ–¥—É–∫—Ç: {case_data['product']['name']}
–û–±—ä—ë–º: {case_data['volume']}"""

    def _format_overall_stats(self, stats: Dict[str, Any]) -> str:
        """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return f"""üìà –í–ê–®–ê –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
–ü—Ä–æ–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_trainings']}
–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {stats['total_questions']}
–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']} –±–∞–ª–ª–æ–≤"""

    def _format_listening_stats(self, session: Dict[str, Any]) -> str:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è."""
        contextual_q = session.get('contextual_questions', 0)
        total_q = session.get('question_count', 0)
        pct = int((contextual_q / total_q) * 100) if total_q > 0 else 0
        
        result = f"""üëÇ –ê–ö–¢–ò–í–ù–û–ï –°–õ–£–®–ê–ù–ò–ï:
–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {contextual_q}/{total_q} ({pct}%)"""
        
        if pct >= 70:
            result += "\nüèÜ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞!"
        elif pct >= 40:
            result += "\nüí° –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ —á–∞—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤"
        else:
            result += "\n‚ö†Ô∏è –°–æ–≤–µ—Ç: —Å—Ç—Ä–æ–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"
        
        return result

    def _format_rank_info(self, stats: Dict[str, Any], config: Dict[str, Any]) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–µ –∏ —É—Ä–æ–≤–Ω–µ."""
        levels = config.get('ranking', {}).get('levels', [])
        current_level = stats.get('current_level', 1)
        current_xp = stats.get('total_xp', 0)
        
        level_data = next((l for l in levels if l.get('level') == current_level), 
                         levels[0] if levels else {'level': 1, 'name': '–ù–æ–≤–∏—á–æ–∫', 'emoji': 'üå±', 'min_xp': 0, 'description': ''})
        next_level_data = next((l for l in levels if l.get('level') == current_level + 1), None)
        
        xp_progress = ""
        if next_level_data:
            xp_to_next = int(next_level_data.get('min_xp', 0)) - current_xp
            if xp_to_next > 0:
                xp_progress = f"\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {xp_to_next} XP"
        
        return f"""‚≠ê –í–ê–® –†–ê–ù–ì:
{level_data.get('emoji', '')} –£—Ä–æ–≤–µ–Ω—å {level_data.get('level', 1)}: {level_data.get('name', '')}
–û–ø—ã—Ç (XP): {current_xp}{xp_progress}
{level_data.get('description', '')}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rank –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""

    def _format_level_up(self, notif: Dict[str, Any], config: Dict[str, Any]) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è."""
        levels = config.get('ranking', {}).get('levels', [])
        level_data = next((l for l in levels if l.get('level') == notif['new_level']), None)
        
        emoji = level_data.get('emoji', 'üéâ') if level_data else 'üéâ'
        name = level_data.get('name', '') if level_data else ''
        
        return f"""üéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –ü–û–í–´–°–ò–õ–ò –£–†–û–í–ï–ù–¨!
{emoji} –£—Ä–æ–≤–µ–Ω—å {notif['old_level']} ‚Üí –£—Ä–æ–≤–µ–Ω—å {notif['new_level']}: {name}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rank –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"""

    def _format_achievements(self, achievements: List[Dict[str, Any]]) -> str:
        """–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
        lines = ["üéñÔ∏è –ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:"]
        for ach in achievements:
            lines.append(f"{ach.get('emoji', '')} {ach.get('name', '')} - {ach.get('description', '')}")
        return "\n".join(lines)

    def _format_footer(self, config: Dict[str, Any]) -> str:
        """–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ –ø—Ä–æ–º–æ-–±–ª–æ–∫."""
        promo = config.get('ui', {}).get('promo_text', {})
        
        footer = "üéØ –î–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–∞—á–∞—Ç—å\" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        
        if promo.get('enabled', True):
            footer += f"\n\nüöÄ {promo.get('title', '–ü–û–õ–ï–ó–ù–´–ô –ö–û–ù–¢–ï–ù–¢ –ü–û –ü–†–û–î–ñ–ê–ú –ò –ò–ò:')}"
            footer += f"\n{promo.get('text', '–≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª–µ –¢–∞–∫—Ç–∏–∫–∞ –ö—É—Ç—É–∑–æ–≤–∞ @TaktikaKutuzova')}"
        
        return footer


