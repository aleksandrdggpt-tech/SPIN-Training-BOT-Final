"""
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
"""

import logging
from typing import Dict, Any

from .user_service import UserService
from .llm_service import LLMService
from .achievement_service import AchievementService
from engine.question_analyzer import QuestionAnalyzer
from engine.report_generator import ReportGenerator
from engine.case_generator import CaseGenerator
from engine.scenario_loader import ScenarioLoader

logger = logging.getLogger(__name__)


class TrainingService:
    """–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏."""
    
    def __init__(
        self,
        user_service: UserService,
        llm_service: LLMService,
        achievement_service: AchievementService,
        question_analyzer: QuestionAnalyzer,
        report_generator: ReportGenerator,
        case_generator: CaseGenerator,
        scenario_loader: ScenarioLoader
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏."""
        self.user_service = user_service
        self.llm_service = llm_service
        self.achievement_service = achievement_service
        self.question_analyzer = question_analyzer
        self.report_generator = report_generator
        self.case_generator = case_generator
        self.scenario_loader = scenario_loader
    
    async def start_training(self, user_id: int, scenario_config: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–µ–π—Å–∞ –∏ –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.user_service.get_user_data(user_id)
            stats = user_data['stats']
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∫–µ–π—Å–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
            recent_cases = stats.get('recent_cases', [])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–µ–π—Å
            case_data = self.case_generator.generate_random_case(exclude_recent=recent_cases)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –≤ —Å–µ—Å—Å–∏—é
            session = user_data['session']
            session['case_data'] = case_data
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–µ–π—Å –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ GPT (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
            client_case = self.case_generator.build_case_direct(case_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–µ–π—Å
            session['client_case'] = client_case
            session['chat_state'] = 'training_active'
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –∫–µ–π—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            case_hash = self.case_generator._get_case_hash(case_data)
            recent_cases.append(case_hash)
            if len(recent_cases) > 5:
                recent_cases.pop(0)
            stats['recent_cases'] = recent_cases
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ–π—Å–∞
            logger.info(f"""
            === –ö–ï–ô–° –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù –ú–ì–ù–û–í–ï–ù–ù–û ===
            –ú–µ—Ç–æ–¥: –ü—Ä—è–º–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ (–±–µ–∑ GPT)
            User ID: {user_id}
            –î–æ–ª–∂–Ω–æ—Å—Ç—å: {case_data['position']}
            –ö–æ–º–ø–∞–Ω–∏—è: {case_data['company']['type']}
            –ü—Ä–æ–¥—É–∫—Ç: {case_data['product']['name']}
            –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: < 0.001 —Å–µ–∫
            ====================================
            """)
            
            return client_case
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–∞: {e}")
            raise
    
    async def process_question(
        self, 
        user_id: int, 
        question: str, 
        scenario_config: Dict[str, Any]
    ) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.user_service.get_user_data(user_id)
            session = user_data['session']
            rules = scenario_config['game_rules']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            qtype = await self.question_analyzer.classify_question(
                question,
                scenario_config['question_types'],
                session.get('client_case', ''),
                lambda kind, sys, usr: self.llm_service.call_llm(kind, sys, usr),
                scenario_config.get('prompts', {})
            )
            question_type_name = qtype.get('name', qtype.get('id'))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            session['question_count'] += 1
            session['last_question_type'] = question_type_name
            
            qid = qtype.get('id')
            session['per_type_counts'][qid] = int(session['per_type_counts'].get(qid, 0)) + 1
            session['clarity_level'] += self.question_analyzer.calculate_clarity_increase(qtype)
            session['clarity_level'] = min(session['clarity_level'], 100)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞
            case_data = session.get('case_data') or {}
            enriched_prompt = (
                f"–í—ã –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫–µ–π—Å–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n\n"
                f"–†–û–õ–¨: {case_data.get('position', '')} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ \"{(case_data.get('company') or {}).get('type', '')}\"\n"
                f"–ö–û–ù–¢–ï–ö–°–¢: {session.get('client_case', '')}\n\n"
                f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n"
                f"- –û–±—ä—ë–º –∑–∞–∫—É–ø–æ–∫: {case_data.get('volume', '')}\n"
                f"- –ß–∞—Å—Ç–æ—Ç–∞: {case_data.get('frequency', '')}\n"
                f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {case_data.get('suppliers_count', '')}\n"
                f"- –¢–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏: {(case_data.get('situation') or {}).get('type', '')}\n"
                f"- –•–∞—Ä–∞–∫—Ç–µ—Ä –∑–∞–∫—É–ø–∫–∏: {case_data.get('urgency', '')}\n\n"
                f"–ü–†–ò–ù–¶–ò–ü–´ –û–¢–í–ï–¢–û–í:\n"
                f"- –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–Ω—è—Ç–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å\n"
                f"- –ù–ï —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–∞–º–∏ - —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ SPIN-–≤–æ–ø—Ä–æ—Å—ã\n"
                f"- –ù–∞ —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –¥–∞–≤–∞–π—Ç–µ —Ñ–∞–∫—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
                f"- –ù–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ: –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –Ω–µ –¥—Ä–∞–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ\n"
                f"- –ù–∞ –∏–∑–≤–ª–µ–∫–∞—é—â–∏–µ: —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –Ω–∞–º—ë–∫–∞–º–∏\n"
                f"- –ù–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n\n"
                f"–°–¢–ò–õ–¨: –ö–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω.\n\n"
                f"–í–æ–ø—Ä–æ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞: {question}"
            )
            client_response = await self.llm_service.call_llm('response', enriched_prompt, "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
            is_contextual = False
            last_resp = session.get('last_client_response', '')
            if last_resp:
                is_contextual = await self.question_analyzer.check_context_usage(
                    question,
                    last_resp,
                    lambda kind, sys, usr: self.llm_service.call_llm('context', sys, usr),
                    scenario_config.get('prompts', {})
                )
            
            context_badge = ""
            if is_contextual:
                session['contextual_questions'] = int(session.get('contextual_questions', 0)) + 1
                contextual_bonus = int(scenario_config.get('scoring', {}).get('question_weights', {}).get('contextual_bonus', 0))
                session['clarity_level'] = min(100, session['clarity_level'] + contextual_bonus)
                context_badge = " üëÇ"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            session['last_client_response'] = client_response
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            progress_line = self.scenario_loader.get_message(
                'progress', 
                count=session['question_count'], 
                max=rules['max_questions'], 
                clarity=session['clarity_level']
            )
            
            response_message = self.scenario_loader.get_message(
                'question_feedback',
                question_type=question_type_name + context_badge,
                client_response=client_response,
                progress_line=progress_line
            )
            
            return response_message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            raise
    
    async def get_feedback(self, user_id: int, scenario_config: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–æ–ø—Ä–æ—Å—É."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.user_service.get_user_data(user_id)
            session = user_data['session']
            
            if not session['last_question_type']:
                return '–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É.'
            
            feedback_prompt = await self.build_feedback_prompt(user_id, scenario_config)

            # TTL-–∫—ç—à —Ñ–∏–¥–±–µ–∫–∞ –Ω–∞ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (20 –º–∏–Ω—É—Ç)
            import time as _time, hashlib as _hashlib
            ttl_sec = 20 * 60
            cache = session.get('feedback_cache') or {}
            prompt_hash = _hashlib.sha256(feedback_prompt.encode('utf-8')).hexdigest()
            cached_hash = cache.get('prompt_hash')
            cached_ts = float(cache.get('ts') or 0)
            cached_text = cache.get('text')
            if cached_hash == prompt_hash and (_time.time() - cached_ts) < ttl_sec and cached_text:
                logger.info("Feedback cache hit")
                return self.scenario_loader.get_message('feedback_response', feedback=cached_text)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ LLM
            feedback = await self.llm_service.call_llm('feedback', feedback_prompt, '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
            feedback_message = self.scenario_loader.get_message(
                'feedback_response',
                feedback=feedback
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            session['feedback_cache'] = {
                'prompt_hash': prompt_hash,
                'ts': _time.time(),
                'text': feedback,
            }

            return feedback_message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            raise

    async def build_feedback_prompt(self, user_id: int, scenario_config: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)."""
        user_data = self.user_service.get_user_data(user_id)
        session = user_data['session']
        if not session['last_question_type']:
            return '–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É.'
        per_type = session.get('per_type_counts', {})
        situational_q = int(per_type.get('situational', 0))
        problem_q = int(per_type.get('problem', 0))
        implication_q = int(per_type.get('implication', 0))
        need_payoff_q = int(per_type.get('need_payoff', 0))
        return self.scenario_loader.get_prompt(
            'feedback',
            last_question_type=session['last_question_type'],
            question_count=session['question_count'],
            clarity_level=session['clarity_level'],
            situational_q=situational_q,
            problem_q=problem_q,
            implication_q=implication_q,
            need_payoff_q=need_payoff_q,
        )
    
    async def complete_training(self, user_id: int, scenario_config: Dict[str, Any]) -> str:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.user_service.get_user_data(user_id)
            session = user_data['session']
            stats = user_data['stats']
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
            total_score = self.question_analyzer.calculate_score(session, scenario_config['question_types'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.user_service.update_stats(user_id, total_score, scenario_config)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = scenario_config.get('achievements', {}).get('list', [])
            newly_unlocked = self.achievement_service.check_achievements_with_config(
                user_id, session, stats, achievements
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞
            user_with_id = user_data.copy()
            user_with_id['user_id'] = user_id
            
            report_data = {
                'session': session,
                'stats': stats,
                'case_data': session.get('case_data'),
                'total_score': total_score,
                'achievements': newly_unlocked,
                'level_up': stats.get('level_up_notification'),
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report = self.report_generator.generate_final_report(report_data, scenario_config)
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ-–±–ª–æ–∫–∞
            try:
                if '–¢–∞–∫—Ç–∏–∫–∞ –ö—É—Ç—É–∑–æ–≤–∞' in report or 'TaktikaKutuzova' in report:
                    logger.info("Final report: promo block PRESENT")
                else:
                    logger.warning("Final report: promo block MISSING")
            except Exception:
                pass
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            self.user_service.reset_session(user_id, scenario_config)
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
            raise
    
    def check_training_completion(self, user_id: int, scenario_config: Dict[str, Any]) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
        user_data = self.user_service.get_user_data(user_id)
        session = user_data['session']
        rules = scenario_config['game_rules']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        if session['question_count'] >= rules['max_questions']:
            return True, "max_questions"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —è—Å–Ω–æ—Å—Ç–∏
        if (session['clarity_level'] >= rules['target_clarity'] and 
            session['question_count'] >= rules['min_questions_for_completion']):
            return True, "clarity_reached"
        
        return False, ""
