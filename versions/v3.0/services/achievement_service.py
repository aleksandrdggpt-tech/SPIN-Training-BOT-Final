"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ —É—Ä–æ–≤–Ω—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π.
"""

import logging
from typing import Dict, List, Any

logger = logging.getLogger(__name__)


class AchievementService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ —É—Ä–æ–≤–Ω—è–º–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        pass
    
    def calculate_level(self, xp: int, levels: List[Dict]) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –æ–ø—ã—Ç—É."""
        try:
            for lvl in sorted(levels, key=lambda l: int(l.get('min_xp', 0))):
                if xp < int(lvl.get('min_xp', 0)):
                    break
            # –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, —á–µ–π min_xp <= xp
            eligible = [int(l.get('level', 1)) for l in levels if xp >= int(l.get('min_xp', 0))]
            return max(eligible) if eligible else 1
        except Exception:
            return 1
    
    def check_achievements(
        self, 
        user_id: int, 
        session: Dict[str, Any], 
        stats: Dict[str, Any], 
        achievements: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è eval —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        eval_context = stats.copy()
        eval_context.update({
            'question_count': session.get('question_count', 0),
            'contextual_questions': session.get('contextual_questions', 0),
            'last_contextual_questions': session.get('contextual_questions', 0),
        })
        
        newly_unlocked = []
        for ach in achievements:
            if ach.get('id') in stats.get('achievements_unlocked', []):
                continue
            condition = ach.get('condition', '')
            try:
                if eval(condition, {"__builtins__": {}}, eval_context):
                    stats['achievements_unlocked'].append(ach['id'])
                    newly_unlocked.append(ach)
                    logger.info(f"üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {ach.get('name')}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {ach.get('id')}: {e}")
        return newly_unlocked
    
    def get_newly_unlocked_achievements(self, user: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç—á—ë—Ç–∞."""
        user_id = user.get('user_id')  # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å user_id –≤ user
        if not user_id:
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = user.get('session', {})
        stats = user.get('stats', {})
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
        # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑–≤–Ω–µ, –Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
        achievements = []  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑–≤–Ω–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        newly_unlocked = self.check_achievements(user_id, session, stats, achievements)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        if stats.get('level_up_notification', {}).get('should_show'):
            stats['level_up_notification']['should_show'] = False
        
        return newly_unlocked
    
    def check_achievements_with_config(
        self, 
        user_id: int, 
        session: Dict[str, Any], 
        stats: Dict[str, Any], 
        achievements: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        return self.check_achievements(user_id, session, stats, achievements)
