"""
SPIN Training Bot - –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è v3.0
–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤.
"""

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –ü–ï–†–í–û–ô –°–¢–†–û–ö–û–ô
from dotenv import load_dotenv
load_dotenv()

import logging
import time
import os
import sys
import signal
import atexit
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode, ChatAction
from telegram.error import Conflict, NetworkError

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from config import Config
from services.llm_service import LLMService
from services.user_service import UserService
from services.achievement_service import AchievementService
from services.training_service import TrainingService
from infrastructure.health_server import start_health_server

# –ò–º–ø–æ—Ä—Ç—ã –¥–≤–∏–∂–∫–∞
from engine.scenario_loader import ScenarioLoader, ScenarioValidationError
from engine.question_analyzer import QuestionAnalyzer
from engine.report_generator import ReportGenerator
from engine.case_generator import CaseGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_instance = None
pid_file = Path("bot.pid")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
llm_service = LLMService()
user_service = UserService()
achievement_service = AchievementService()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
scenario_loader = ScenarioLoader()
question_analyzer = QuestionAnalyzer()
report_generator = ReportGenerator()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
try:
    loaded_scenario = scenario_loader.load_scenario(config.SCENARIO_PATH)
    scenario_config = loaded_scenario.config
    case_generator = CaseGenerator(scenario_config['case_variants'])
    logger.info("–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except (FileNotFoundError, ScenarioValidationError) as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
training_service = TrainingService(
    user_service=user_service,
    llm_service=llm_service,
    achievement_service=achievement_service,
    question_analyzer=question_analyzer,
    report_generator=report_generator,
    case_generator=case_generator,
    scenario_loader=scenario_loader
)


# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–û–ú ====================

def create_pid_file():
    """–°–æ–∑–¥–∞–µ—Ç PID —Ñ–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    try:
        with open(pid_file, 'w') as f:
            f.write(str(os.getpid()))
        logger.info(f"PID —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {pid_file}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PID —Ñ–∞–π–ª–∞: {e}")


def remove_pid_file():
    """–£–¥–∞–ª—è–µ—Ç PID —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    try:
        if pid_file.exists():
            pid_file.unlink()
            logger.info("PID —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è PID —Ñ–∞–π–ª–∞: {e}")


def check_existing_process():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞."""
    if not pid_file.exists():
        return False
    
    try:
        with open(pid_file, 'r') as f:
            pid = int(f.read().strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —ç—Ç–∏–º PID
        try:
            os.kill(pid, 0)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª 0 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            logger.warning(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID {pid}")
            return True
        except OSError:
            # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª
            pid_file.unlink()
            logger.info("–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª")
            return False
    except (ValueError, FileNotFoundError):
        # PID —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω
        return False


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    remove_pid_file()
    if app_instance:
        app_instance.stop()
    # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è,
    # –ø–æ—Å–ª–µ —á–µ–≥–æ main() –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."""
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    atexit.register(remove_pid_file)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    t0 = time.perf_counter()
    logger.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = update.effective_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞
    user_service.reset_session(user_id, scenario_config)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_message = scenario_loader.get_message('welcome')
    await update.message.reply_text(welcome_message)
    logger.info(f"‚è± /start handled in {int((time.perf_counter()-t0)*1000)} ms")


async def scenario_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏."""
    t0 = time.perf_counter()
    try:
        # –ë–µ—Ä—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ scenario_info –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–∞–º–∏
        s_info = scenario_config.get('scenario_info', {})
        name = s_info.get('name', 'Unknown')
        version = s_info.get('version', '')
        description = s_info.get('description', '')
        info_text = f"–°—Ü–µ–Ω–∞—Ä–∏–π: {name}\n–í–µ—Ä—Å–∏—è: {version}\n\n{description}".strip()
        await update.message.reply_text(info_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏: {e}")
        await update.message.reply_text(scenario_loader.get_message('error_generic'))
    finally:
        logger.info(f"‚è± /scenario handled in {int((time.perf_counter()-t0)*1000)} ms")


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    t0 = time.perf_counter()
    user_id = update.effective_user.id
    user_data = user_service.get_user_data(user_id)
    stats = user_data['stats']
    
    stats_text = f"""üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {stats['total_trainings']}
‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {stats['total_questions']}
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']} –±–∞–ª–ª–æ–≤
‚≠ê –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {stats['current_level']}
üíé –û–ø—ã—Ç (XP): {stats['total_xp']}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rank –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö."""
    
    await update.message.reply_text(stats_text)
    logger.info(f"‚è± /stats handled in {int((time.perf_counter()-t0)*1000)} ms")


async def rank_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö."""
    t0 = time.perf_counter()
    user_id = update.effective_user.id
    user_data = user_service.get_user_data(user_id)
    stats = user_data['stats']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ
    levels = scenario_config.get('ranking', {}).get('levels', [])
    current_level = stats.get('current_level', 1)
    level_data = next((l for l in levels if l.get('level') == current_level), levels[0] if levels else {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–Ω–≥–µ
    rank_text = f"""‚≠ê –í–ê–® –†–ê–ù–ì:

{level_data.get('emoji', '')} –£—Ä–æ–≤–µ–Ω—å {current_level}: {level_data.get('name', '')}
üíé –û–ø—ã—Ç (XP): {stats['total_xp']}
üìù {level_data.get('description', '')}

üéñÔ∏è –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    achievements = scenario_config.get('achievements', {}).get('list', [])
    unlocked_achievements = stats.get('achievements_unlocked', [])
    
    for ach in achievements:
        if ach.get('id') in unlocked_achievements:
            rank_text += f"‚úÖ {ach.get('emoji', '')} {ach.get('name', '')} - {ach.get('description', '')}\n"
        else:
            rank_text += f"üîí {ach.get('emoji', '')} {ach.get('name', '')} - {ach.get('description', '')}\n"
    
    await update.message.reply_text(rank_text)
    logger.info(f"‚è± /rank handled in {int((time.perf_counter()-t0)*1000)} ms")


async def case_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–µ–π—Å–µ."""
    t0 = time.perf_counter()
    user_id = update.effective_user.id
    user_data = user_service.get_user_data(user_id)
    session = user_data['session']
    
    if not session.get('case_data'):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        logger.info(f"‚è± /case handled in {int((time.perf_counter()-t0)*1000)} ms")
        return
    
    case_data = session['case_data']
    case_info = f"""üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ï–ô–°–ï:

üë§ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {case_data['position']}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {case_data['company']['type']}
üì¶ –ü—Ä–æ–¥—É–∫—Ç: {case_data['product']['name']}
üí∞ –û–±—ä—ë–º: {case_data['volume']}
üîÑ –ß–∞—Å—Ç–æ—Ç–∞: {case_data.get('frequency', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìä –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {case_data.get('suppliers_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: {case_data.get('urgency', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"""
    
    await update.message.reply_text(case_info)
    logger.info(f"‚è± /case handled in {int((time.perf_counter()-t0)*1000)} ms")


async def caseinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–ª–∏–∞—Å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ–π—Å–µ (/caseinfo)."""
    return await case_command(update, context)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞."""
    t0 = time.perf_counter()
    help_text = """üìñ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ:
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/stats - –í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/rank - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
/caseinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∫–µ–π—Å–µ

üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:
/author - –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí¨ –ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:
‚Ä¢ "–Ω–∞—á–∞—Ç—å" –∏–ª–∏ "—Å—Ç–∞—Ä—Ç" - –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
‚Ä¢ "–î–ê" - –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–æ–ø—Ä–æ—Å—É
‚Ä¢ "–∑–∞–≤–µ—Ä—à–∏—Ç—å" - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç

üéØ –¶–µ–ª—å: –ó–∞–¥–∞–≤–∞–π—Ç–µ SPIN-–≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ–±—ã –≤—ã—è–≤–∏—Ç—å –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–≤–æ–π —è—Å–Ω–æ—Å—Ç–∏!"""
    
    await update.message.reply_text(help_text)
    logger.info(f"‚è± /help handled in {int((time.perf_counter()-t0)*1000)} ms")


async def author_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏."""
    t0 = time.perf_counter()
    text = (
        "–ê–≤—Ç–æ—Ä –±–æ—Ç–∞ - –ì–æ—Ç–∞–ª—å—Å–∫–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä\n\n"
        "üöÄ –ü–û–õ–ï–ó–ù–´–ô –ö–û–ù–¢–ï–ù–¢ –ü–û –ü–†–û–î–ñ–ê–ú –ò –ò–ò:\n"
        "–≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª–µ –¢–∞–∫—Ç–∏–∫–∞ –ö—É—Ç—É–∑–æ–≤–∞ @TaktikaKutuzova  \n\n"
        "–•–æ—Ç–∏—Ç–µ –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ò–ò –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–∏—à–∏—Ç–µ –Ω–∞ @gotaleks"
    )
    await update.message.reply_text(text)
    logger.info(f"‚è± /author handled in {int((time.perf_counter()-t0)*1000)} ms")


async def validate_config_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏."""
    t0 = time.perf_counter()
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    user_id = update.effective_user.id
    if config.ADMIN_USER_IDS and user_id not in config.ADMIN_USER_IDS:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /validate –±–µ–∑ –ø—Ä–∞–≤")
        return
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –£ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    for company in case_generator.variants['companies']:
        compatible_products = [
            p for p in case_generator.variants['products']
            if company['type'] in p.get('compatible_companies', [])
        ]
        if not compatible_products:
            errors.append(f"‚ùå {company['type']}: –Ω–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –£ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –µ—Å—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω positions_by_size)
    positions_by_size = case_generator.variants.get('positions_by_size', {})
    for size in case_generator.variants['company_sizes']:
        if positions_by_size and not positions_by_size.get(size):
            errors.append(f"‚ùå {size}: –Ω–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π!")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if errors:
        response = "‚ùå –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:\n" + "\n".join(errors)
    elif warnings:
        response = "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n" + "\n".join(warnings) + "\n\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        response = "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!"
    
    await update.message.reply_text(response)
    logger.info(f"‚è± /validate handled in {int((time.perf_counter()-t0)*1000)} ms")


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    t_msg = time.perf_counter()
    user_id = update.effective_user.id
    message_text = update.message.text
    rules = scenario_config['game_rules']
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_service.get_user_data(user_id)
    session = user_data['session']
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    if session.get('chat_state') == 'waiting_start':
        if message_text.lower() in ['–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
            try:
                t_op = time.perf_counter()
                client_case = await training_service.start_training(user_id, scenario_config)
                await update.message.reply_text(client_case)
                logger.info(f"‚è± start_training handled in {int((time.perf_counter()-t_op)*1000)} ms")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–∞: {e}")
                await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–∞—á–∞—Ç—å".')
        else:
            await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
        logger.info(f"‚è± message (waiting_start) handled in {int((time.perf_counter()-t_msg)*1000)} ms")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if message_text.upper() == '–î–ê':
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥—ë—Ç –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
            # –ê–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ñ–∏–¥–±–µ–∫ –∏–ª–∏ –æ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
            cooldown_sec = 5
            now_ts = time.time()
            last_ts = float(session.get('last_feedback_ts') or 0)
            in_progress = bool(session.get('feedback_in_progress'))
            if in_progress or (now_ts - last_ts) < cooldown_sec:
                await update.message.reply_text('–§–∏–¥–±–µ–∫ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...')
                logger.info(f"–ê–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–¥–±–µ–∫–∞: in_progress={in_progress} delta={now_ts - last_ts:.2f}s")
                return
            session['feedback_in_progress'] = True
            session['last_feedback_ts'] = now_ts
            t_op = time.perf_counter()
            # –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ GPT-5; –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—É—Ç—å
            sent = await update.message.reply_text('‚è≥ –ü–∏—à—É —Ñ–∏–¥–±–µ–∫‚Ä¶')
            try:
                feedback_prompt = await training_service.build_feedback_prompt(user_id, scenario_config)
                chunks = []
                async for delta in llm_service.stream_feedback(feedback_prompt, '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é'):
                    chunks.append(delta)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞—Ç—á–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Telegram API
                    if len(chunks) % 10 == 0:
                        await context.bot.edit_message_text(
                            chat_id=sent.chat_id,
                            message_id=sent.message_id,
                            text=''.join(chunks) or '‚Ä¶'
                        )
                # –ï—Å–ª–∏ –∏–∑ —Å—Ç—Ä–∏–º–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –Ω–µ—É—Å–ø–µ—Ö–æ–º –∏ —É—Ö–æ–¥–∏–º –≤ –Ω–µ—Å—Ç—Ä–∏–º
                if not ''.join(chunks).strip():
                    raise RuntimeError('empty stream output')
                # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–ø–¥–µ–π—Ç
                final_text = ''.join(chunks).strip()
                await context.bot.edit_message_text(
                    chat_id=sent.chat_id,
                    message_id=sent.message_id,
                    text=final_text
                )
            except Exception:
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –Ω–µ—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –ø—É—Ç—å
                feedback = await training_service.get_feedback(user_id, scenario_config)
                await context.bot.edit_message_text(
                    chat_id=sent.chat_id,
                    message_id=sent.message_id,
                    text=feedback
                )
            logger.info(f"‚è± feedback handled in {int((time.perf_counter()-t_op)*1000)} ms")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            await update.message.reply_text(scenario_loader.get_message('error_generic'))
        finally:
            session['feedback_in_progress'] = False
            session['last_feedback_ts'] = time.time()
            logger.info(f"‚è± message (feedback) handled in {int((time.perf_counter()-t_msg)*1000)} ms")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if message_text.lower() == '–∑–∞–≤–µ—Ä—à–∏—Ç—å':
        try:
            t_op = time.perf_counter()
            report = await training_service.complete_training(user_id, scenario_config)
            await update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
            logger.info(f"‚è± complete_training handled in {int((time.perf_counter()-t_op)*1000)} ms")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
            await update.message.reply_text(scenario_loader.get_message('error_generic'))
        finally:
            logger.info(f"‚è± message (finish) handled in {int((time.perf_counter()-t_msg)*1000)} ms")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if len(message_text) <= rules.get('short_question_threshold', 5):
        await update.message.reply_text('–ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.')
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    if session['question_count'] >= rules['max_questions']:
        try:
            report = await training_service.complete_training(user_id, scenario_config)
            await update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
            await update.message.reply_text(scenario_loader.get_message('error_generic'))
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –ü–æ–∫–∞–∂–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        t_op = time.perf_counter()
        response_message = await training_service.process_question(user_id, message_text, scenario_config)
        logger.info(f"‚è± process_question handled in {int((time.perf_counter()-t_op)*1000)} ms")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
        is_complete, completion_reason = training_service.check_training_completion(user_id, scenario_config)
        
        if is_complete:
            if completion_reason == "clarity_reached":
                await update.message.reply_text(response_message)
                await update.message.reply_text(
                    scenario_loader.get_message('clarity_reached', clarity=session['clarity_level'])
                )
            elif completion_reason == "max_questions":
                try:
                    report = await training_service.complete_training(user_id, scenario_config)
                    await update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
                    await update.message.reply_text(scenario_loader.get_message('error_generic'))
        else:
            await update.message.reply_text(response_message)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(scenario_loader.get_message('error_generic'))
    finally:
        logger.info(f"‚è± message handled in {int((time.perf_counter()-t_msg)*1000)} ms")


# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global app_instance
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if check_existing_process():
        print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ.")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: kill $(cat bot.pid)")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ PID —Ñ–∞–π–ª–∞
    create_pid_file()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config.validate()
        config.print_config()
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á")
        remove_pid_file()
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(config.BOT_TOKEN).build()
        app_instance = application
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("scenario", scenario_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("rank", rank_command))
        application.add_handler(CommandHandler("case", case_command))
        application.add_handler(CommandHandler("caseinfo", caseinfo_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("validate", validate_config_command))
        application.add_handler(CommandHandler("author", author_command))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞
        start_health_server(config.PORT)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print(f"üìä Health check –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {config.PORT}")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É: kill $(cat bot.pid)")
        
        # –õ—ë–≥–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤ LLM –º–æ–¥–µ–ª–µ–π (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
        try:
            import asyncio as _asyncio
            _asyncio.get_event_loop().create_task(llm_service.warmup())
        except Exception:
            pass

        application.run_polling()
        
    except Conflict as e:
        logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å Telegram API: {e}")
        print("‚ùå –û—à–∏–±–∫–∞: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞.")
        remove_pid_file()
        return
        
    except NetworkError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
        remove_pid_file()
        return
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        remove_pid_file()
        return
        
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        remove_pid_file()
        return
    finally:
        # –ì—Ä–µ–π—Å—Ñ—É–ª –∑–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤ LLMService
        try:
            import asyncio as _asyncio
            _asyncio.run(llm_service.aclose())
        except Exception:
            pass


if __name__ == '__main__':
    main()
