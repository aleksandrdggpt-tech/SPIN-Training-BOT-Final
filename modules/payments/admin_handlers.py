"""
Admin handlers for SPIN Training Bot v4.
Handles admin panel, promocode management, and user management.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ConversationHandler
)
from telegram.constants import ParseMode
from sqlalchemy import select
from enum import Enum, IntEnum

from database.database import get_session
from database import Promocode, PromocodeType
from .promocodes import (
    create_promocode, list_promocodes, 
    get_promocode_stats, format_promocode_info
)
from .keyboards import get_admin_promo_keyboard
from config import Config

logger = logging.getLogger(__name__)
config = Config()


class AdminPromoStates(IntEnum):
    """States for promocode creation dialog."""
    WAITING_CODE = 1
    WAITING_TYPE = 2
    WAITING_VALUE = 3
    WAITING_MAX_USES = 4
    WAITING_EXPIRES = 5


# ==================== ADMIN AUTHENTICATION ====================

def is_admin(user_id: int) -> bool:
    """Check if user is admin."""
    admin_ids = config.ADMIN_USER_IDS
    if not admin_ids:
        return False
    return user_id in admin_ids


# ==================== ADMIN COMMAND ====================

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /admin command - show admin panel."""
    telegram_id = update.effective_user.id
    
    # Check if user is admin
    if not is_admin(telegram_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # Show admin panel
    message = """
üîß **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await update.message.reply_text(
        message,
        reply_markup=get_admin_promo_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )


# ==================== ADMIN CALLBACK HANDLERS ====================

async def admin_list_promos_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show list of promocodes."""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    
    if not is_admin(telegram_id):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        # Get promocodes
        async with get_session() as session:
            promos = await list_promocodes(active_only=False, limit=20, session=session)
        
        if not promos:
            await query.edit_message_text("üì≠ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        # Format message
        lines = ["üìã **–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:**\n"]
        for promo in promos[:10]:  # Show first 10
            info = format_promocode_info(promo)
            lines.append(info)
        
        if len(promos) > 10:
            lines.append(f"\n... –∏ –µ—â—ë {len(promos) - 10}")
        
        message = "\n\n".join(lines)
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]
            ])
        )
    
    except Exception as e:
        logger.error(f"Error listing promocodes: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")


async def admin_create_promo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start promocode creation dialog."""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    
    if not is_admin(telegram_id):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END
    
    # Initialize context
    context.user_data['promo_data'] = {}
    
    # Start step-by-step creation
    message = """
‚ûï **–°–û–ó–î–ê–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê**

–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞

–ù–∞–ø—Ä–∏–º–µ—Ä: WINTER2025, SPRING50, SUMMER100

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:cancel_promo")]
    ])
    
    await query.edit_message_text(
        message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    return AdminPromoStates.WAITING_CODE


async def admin_promo_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle code input."""
    code = update.message.text.strip().upper()
    logger.info(f"Admin promocode handler received code: {code}")
    
    # Validate code
    if not code:
        await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return AdminPromoStates.WAITING_CODE
    
    if not code.isalnum():
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return AdminPromoStates.WAITING_CODE
    
    # Check if exists
    async with get_session() as session:
        result = await session.execute(
            select(Promocode).where(Promocode.code == code)
        )
        existing = result.scalar_one_or_none()
    
    if existing:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π:")
        return AdminPromoStates.WAITING_CODE
    
    # Store code
    context.user_data['promo_data']['code'] = code
    
    # Show type selection
    message = """
üéÅ **–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –ü–†–û–ú–û–ö–û–î–ê**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="admin:promo_type:trainings")],
        [InlineKeyboardButton("üìÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü", callback_data="admin:promo_type:free_month")],
        [InlineKeyboardButton("üíé –ö—Ä–µ–¥–∏—Ç—ã", callback_data="admin:promo_type:credits")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:cancel_promo")]
    ])
    
    await update.message.reply_text(
        message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    return AdminPromoStates.WAITING_TYPE


async def admin_promo_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle type selection."""
    query = update.callback_query
    await query.answer()
    
    # Extract type from callback_data: "admin:promo_type:trainings"
    promo_type_str = query.data.split(':')[-1]
    
    type_mapping = {
        'trainings': PromocodeType.TRAININGS,
        'free_month': PromocodeType.FREE_MONTH,
        'credits': PromocodeType.CREDITS
    }
    
    promo_type = type_mapping.get(promo_type_str)
    if not promo_type:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
        return ConversationHandler.END
    
    context.user_data['promo_data']['type'] = promo_type
    
    # Ask for value - send as new message
    message = f"""
üíé **–í–í–ï–î–ò–¢–ï –ó–ù–ê–ß–ï–ù–ò–ï**

–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {promo_type.value}

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:
‚Ä¢ –î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –î–ª—è –º–µ—Å—è—Ü–∞: –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 0 (—Ç–∏–ø–∞ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü)
‚Ä¢ –î–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤

–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è 0.
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:cancel_promo")]
    ])
    
    # Edit the callback query message to show "Type selected"
    await query.edit_message_text(
        f"‚úÖ –¢–∏–ø –≤—ã–±—Ä–∞–Ω: {promo_type.value}",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Send new message asking for value
    await query.message.reply_text(
        message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    return AdminPromoStates.WAITING_VALUE


async def admin_promo_value_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle value input."""
    text = update.message.text.strip().lower()
    
    # Check for skip
    if text in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '0']:
        value = 0
    else:
        try:
            value = int(text)
            if value < 0:
                await update.message.reply_text("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return AdminPromoStates.WAITING_VALUE
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return AdminPromoStates.WAITING_VALUE
    
    context.user_data['promo_data']['value'] = value
    
    # Ask for max uses
    message = """
üë• **–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ô**

–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.
–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–±–µ–∑–ª–∏–º–∏—Ç" –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ 100 - –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 100 —Ä–∞–∑
‚Ä¢ –±–µ–∑–ª–∏–º–∏—Ç - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:cancel_promo")]
    ])
    
    await update.message.reply_text(
        message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    return AdminPromoStates.WAITING_MAX_USES


async def admin_promo_max_uses_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle max uses input."""
    text = update.message.text.strip().lower()
    
    # Check for unlimited
    if text in ['–±–µ–∑–ª–∏–º–∏—Ç', 'unlimited', '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ']:
        max_uses = None
    else:
        try:
            max_uses = int(text)
            if max_uses <= 0:
                await update.message.reply_text("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return AdminPromoStates.WAITING_MAX_USES
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–±–µ–∑–ª–∏–º–∏—Ç'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return AdminPromoStates.WAITING_MAX_USES
    
    context.user_data['promo_data']['max_uses'] = max_uses
    
    # Ask for expiration
    message = """
‚è∞ **–°–†–û–ö –î–ï–ô–°–¢–í–ò–Ø**

–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö.
–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–±–µ–∑ —Å—Ä–æ–∫–∞" –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ 30 - –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π
‚Ä¢ 7 - –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–µ–¥–µ–ª—é
‚Ä¢ –±–µ–∑ —Å—Ä–æ–∫–∞ - –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:cancel_promo")]
    ])
    
    await update.message.reply_text(
        message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    return AdminPromoStates.WAITING_EXPIRES


async def admin_promo_expires_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle expiration input and create promocode."""
    text = update.message.text.strip().lower()
    
    # Check for no expiration
    if text in ['–±–µ–∑ —Å—Ä–æ–∫–∞', 'never', '–±–µ—Å—Å—Ä–æ—á–Ω–æ']:
        expires_days = None
    else:
        try:
            expires_days = int(text)
            if expires_days <= 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return AdminPromoStates.WAITING_EXPIRES
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–±–µ–∑ —Å—Ä–æ–∫–∞'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return AdminPromoStates.WAITING_EXPIRES
    
    # Get all data
    promo_data = context.user_data.get('promo_data', {})
    code = promo_data.get('code')
    promo_type = promo_data.get('type')
    value = promo_data.get('value', 0)
    max_uses = promo_data.get('max_uses')
    
    # Create promocode
    async with get_session() as session:
        success, message_text, promo = await create_promocode(
            code=code,
            promo_type=promo_type,
            value=value,
            max_uses=max_uses,
            expires_days=expires_days,
            session=session
        )
    
    if success:
        final_message = f"""
‚úÖ **–ü–†–û–ú–û–ö–û–î –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!**

{message_text}

–¢–µ–ø–µ—Ä—å –µ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!
"""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:back")]
        ])
    else:
        final_message = f"""
‚ùå **–û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–ê**

{message_text}
"""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:back")]
        ])
    
    await update.message.reply_text(
        final_message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    
    # Clean up
    context.user_data.pop('promo_data', None)
    
    return ConversationHandler.END


async def admin_cancel_promo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel promocode creation."""
    query = update.callback_query
    await query.answer()
    
    # Clean up
    context.user_data.pop('promo_data', None)
    
    await query.edit_message_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_admin_promo_keyboard()
    )
    
    return ConversationHandler.END


async def admin_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show statistics."""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    
    if not is_admin(telegram_id):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        async with get_session() as session:
            # Get active promocodes
            active_promos = await list_promocodes(active_only=True, session=session)
            all_promos = await list_promocodes(active_only=False, limit=1000, session=session)
            
            # Count usages
            from database import PromocodeUsage
            result = await session.execute(
                select(PromocodeUsage)
            )
            usages = result.scalars().all()
            
            # Count by status
            active_count = len(active_promos)
            total_count = len(all_promos)
            expired_count = total_count - active_count
            usage_count = len(usages)
        
        message = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ú–û–ö–û–î–û–í**

üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}
üì¶ –í—Å–µ–≥–æ: {total_count}
‚è∞ –ò—Å—Ç–µ–∫–ª–æ: {expired_count}
üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {usage_count}
"""
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]
            ])
        )
    
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def admin_give_access_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Give free access to user."""
    query = update.callback_query
    await query.answer()
    
    telegram_id = query.from_user.id
    
    if not is_admin(telegram_id):
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # TODO: Implement user access management
    message = """
üéÅ **–í–´–î–ê–ß–ê –î–û–°–¢–£–ü–ê**

–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üìù **TODO:** –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º.
"""
    
    await query.edit_message_text(
        message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")]
        ])
    )


async def admin_back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Go back to admin panel."""
    query = update.callback_query
    await query.answer()
    
    message = """
üîß **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await query.edit_message_text(
        message,
        reply_markup=get_admin_promo_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )


# ==================== REGISTER ADMIN HANDLERS ====================

def register_admin_handlers(application):
    """
    Register admin handlers.
    
    Args:
        application: Telegram Application instance
    """
    # Admin command
    application.add_handler(CommandHandler("admin", admin_command))
    
    # Admin callbacks
    application.add_handler(CallbackQueryHandler(
        admin_list_promos_callback,
        pattern="^admin:list_promos$"
    ))
    application.add_handler(CallbackQueryHandler(
        admin_stats_callback,
        pattern="^admin:stats$"
    ))
    application.add_handler(CallbackQueryHandler(
        admin_give_access_callback,
        pattern="^admin:give_access$"
    ))
    application.add_handler(CallbackQueryHandler(
        admin_back_callback,
        pattern="^admin:back$"
    ))
    
    # ConversationHandler for promocode creation
    promo_creation_conversation = ConversationHandler(
        entry_points=[CallbackQueryHandler(
            admin_create_promo_callback,
            pattern="^admin:create_promo$"
        )],
        states={
            AdminPromoStates.WAITING_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_promo_code_handler)
            ],
            AdminPromoStates.WAITING_TYPE: [
                CallbackQueryHandler(admin_promo_type_handler, pattern="^admin:promo_type:")
            ],
            AdminPromoStates.WAITING_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_promo_value_handler)
            ],
            AdminPromoStates.WAITING_MAX_USES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_promo_max_uses_handler)
            ],
            AdminPromoStates.WAITING_EXPIRES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_promo_expires_handler)
            ],
        },
        fallbacks=[
            CallbackQueryHandler(admin_cancel_promo_callback, pattern="^admin:cancel_promo$"),
            CallbackQueryHandler(admin_back_callback, pattern="^admin:back$")
        ]
    )
    application.add_handler(promo_creation_conversation)
    
    logger.info("‚úÖ Admin handlers registered")

