"""
Payment handlers for SPIN Training Bot v4.
Telegram command handlers for payment flow.
"""

import logging
from telegram import Update
from telegram.ext import (
    ContextTypes, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ConversationHandler
)

from database.database import get_session
from .subscription import (
    check_access, get_user_access_info,
    check_channel_subscription, grant_channel_subscription_bonus
)
from .promocodes import validate_promocode, activate_promocode
from .messages import (
    WELCOME_SALES, NO_ACCESS, FREE_ACCESS_CHANNEL,
    FREE_ACCESS_PROMO, PAYMENT_SUCCESS
)
from .keyboards import (
    get_payment_menu_keyboard, get_tariffs_keyboard,
    get_free_access_keyboard, get_promo_cancel_keyboard,
    get_access_denied_keyboard
)
from .states import PaymentStates, PromoInputStates
from .config import TARIFFS, format_price

logger = logging.getLogger(__name__)


# ==================== MAIN PAYMENT COMMAND ====================

async def payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /payment command - show payment menu."""
    telegram_id = update.effective_user.id

    async with get_session() as session:
        access_info = await get_user_access_info(telegram_id, session)

    message = f"""
{WELCOME_SALES}

üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å:**
{access_info}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

    await update.message.reply_text(
        message,
        reply_markup=get_payment_menu_keyboard()
    )
    return PaymentStates.MAIN_MENU


# ==================== CALLBACK HANDLERS ====================

async def show_tariffs_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show available tariffs."""
    query = update.callback_query
    await query.answer()

    message = """
üíé **–í–´–ë–ï–†–ò–¢–ï –¢–ê–†–ò–§:**

–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –≤–∫–ª—é—á–∞—é—Ç:
‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç AI
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–µ–π—Å–∞–º
"""

    await query.edit_message_text(
        message,
        reply_markup=get_tariffs_keyboard(show_credits=False)
    )
    return PaymentStates.SELECTING_TARIFF


async def select_tariff_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle tariff selection."""
    query = update.callback_query
    await query.answer()

    # Extract tariff_id from callback_data: "payment:select_tariff:month"
    tariff_id = query.data.split(':')[-1]
    tariff = TARIFFS.get(tariff_id)

    if not tariff:
        await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return PaymentStates.MAIN_MENU

    # Store selected tariff in user context
    context.user_data['selected_tariff'] = tariff_id

    price = format_price(tariff_id)
    discount_text = f"\nüî• **–°–∫–∏–¥–∫–∞:** {tariff['discount']}" if 'discount' in tariff else ""

    message = f"""
{tariff['emoji']} **{tariff['name']}**

üí∞ **–¶–µ–Ω–∞:** {price}{discount_text}
üìù {tariff['description']}

–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
"""

    from .keyboards import get_tariff_confirmation_keyboard
    await query.edit_message_text(
        message,
        reply_markup=get_tariff_confirmation_keyboard(tariff_id)
    )
    return PaymentStates.CONFIRMING_TARIFF


async def pay_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle payment initiation."""
    query = update.callback_query
    await query.answer()

    tariff_id = query.data.split(':')[-1]
    tariff = TARIFFS.get(tariff_id)

    if not tariff:
        await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return PaymentStates.MAIN_MENU

    # TODO: Integrate with actual payment provider
    # For now, show stub message

    message = """
üöß **–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–û–ô**

–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–¥—É–ª—å –æ–ø–ª–∞—Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å:
‚Ä¢ YooKassa
‚Ä¢ CloudPayments
‚Ä¢ Prodamus

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏ –≤ .env
2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –≤ providers/
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

**–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ TEST –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
"""

    from .keyboards import get_payment_menu_keyboard
    await query.edit_message_text(
        message,
        reply_markup=get_payment_menu_keyboard()
    )
    return PaymentStates.MAIN_MENU


# ==================== FREE ACCESS ====================

async def free_access_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show free access options."""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        FREE_ACCESS_CHANNEL,
        reply_markup=get_free_access_keyboard()
    )
    return PaymentStates.CHECKING_SUBSCRIPTION


async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Check if user subscribed to channel."""
    query = update.callback_query
    telegram_id = update.effective_user.id

    await query.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")

    async with get_session() as session:
        granted = await grant_channel_subscription_bonus(
            context.bot,
            telegram_id,
            session
        )

    if granted:
        message = """
‚úÖ **–ü–û–î–ü–ò–°–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!**

–í—ã –ø–æ–ª—É—á–∏–ª–∏ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start
"""
        from .keyboards import get_payment_menu_keyboard
        await query.edit_message_text(message, reply_markup=get_payment_menu_keyboard())
    else:
        message = """
‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:
1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @TaktikaKutuzova
2. –ù–∞–∂–º–∏—Ç–µ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è" –µ—â–µ —Ä–∞–∑
"""
        await query.edit_message_text(message, reply_markup=get_free_access_keyboard())

    return PaymentStates.MAIN_MENU


# ==================== PROMOCODE ====================

async def enter_promo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start promocode input."""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        FREE_ACCESS_PROMO,
        reply_markup=get_promo_cancel_keyboard()
    )
    return PromoInputStates.WAITING_CODE


async def process_promocode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process entered promocode."""
    code = update.message.text.strip().upper()
    telegram_id = update.effective_user.id

    async with get_session() as session:
        success, message = await activate_promocode(code, telegram_id, session)

    await update.message.reply_text(message)

    if success:
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start"
        )

    return ConversationHandler.END


async def promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /promo command - activate promocode."""
    telegram_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "üéüÔ∏è **–ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–†–û–ú–û–ö–û–î–ê**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/promo <–∫–æ–¥>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/promo WINTER2025`\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /payment –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )
        return
    
    code = context.args[0].strip().upper()
    
    async with get_session() as session:
        success, message = await activate_promocode(code, telegram_id, session)
    
    await update.message.reply_text(message)
    
    if success:
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start"
        )


async def cancel_promo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel promocode input."""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_payment_menu_keyboard()
    )
    return PaymentStates.MAIN_MENU


# ==================== BACK NAVIGATION ====================

async def back_to_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Return to main payment menu."""
    query = update.callback_query
    await query.answer()

    telegram_id = update.effective_user.id
    async with get_session() as session:
        access_info = await get_user_access_info(telegram_id, session)

    message = f"""
üí≥ **–ú–ï–ù–Æ –û–ü–õ–ê–¢–´**

{access_info}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

    await query.edit_message_text(
        message,
        reply_markup=get_payment_menu_keyboard()
    )
    return PaymentStates.MAIN_MENU


async def close_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Close payment menu."""
    query = update.callback_query
    await query.answer()

    await query.delete_message()
    return ConversationHandler.END


# ==================== REGISTER HANDLERS ====================

def register_payment_handlers(application):
    """
    Register all payment-related handlers.

    Args:
        application: Telegram Application instance
    """
    # Payment command
    application.add_handler(CommandHandler("payment", payment_command))
    application.add_handler(CommandHandler("buy", payment_command))
    application.add_handler(CommandHandler("subscribe", payment_command))
    
    # Promocode command
    application.add_handler(CommandHandler("promo", promo_command))

    # Callback handlers for payment flow
    application.add_handler(CallbackQueryHandler(
        show_tariffs_callback,
        pattern="^payment:show_tariffs$"
    ))
    application.add_handler(CallbackQueryHandler(
        select_tariff_callback,
        pattern="^payment:select_tariff:"
    ))
    application.add_handler(CallbackQueryHandler(
        pay_callback,
        pattern="^payment:pay:"
    ))
    application.add_handler(CallbackQueryHandler(
        free_access_callback,
        pattern="^payment:free_access$"
    ))
    application.add_handler(CallbackQueryHandler(
        check_subscription_callback,
        pattern="^payment:check_subscription$"
    ))
    application.add_handler(CallbackQueryHandler(
        enter_promo_callback,
        pattern="^payment:enter_promo$"
    ))
    application.add_handler(CallbackQueryHandler(
        cancel_promo_callback,
        pattern="^payment:cancel_promo$"
    ))
    application.add_handler(CallbackQueryHandler(
        back_to_menu_callback,
        pattern="^payment:back_to_menu$"
    ))
    application.add_handler(CallbackQueryHandler(
        close_callback,
        pattern="^payment:close$"
    ))

    # Conversation handler for promocode input
    promo_conversation = ConversationHandler(
        entry_points=[CallbackQueryHandler(enter_promo_callback, pattern="^payment:enter_promo$")],
        states={
            PromoInputStates.WAITING_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_promocode)
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_promo_callback, pattern="^payment:cancel_promo$")]
    )
    application.add_handler(promo_conversation)

    logger.info("‚úÖ Payment handlers registered")
    
    # Register admin handlers
    from .admin_handlers import register_admin_handlers
    register_admin_handlers(application)