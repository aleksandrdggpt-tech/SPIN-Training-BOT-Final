"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ users_data.json –≤ PostgreSQL.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/migrate_from_json.py [–ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É]

–ü—Ä–∏–º–µ—Ä:
    python scripts/migrate_from_json.py users_data.json
"""

import asyncio
import json
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from database import init_db, get_session
from database.repositories import UserRepository, SessionRepository
from services.database_service import DatabaseService


async def migrate_json_to_db(json_file: str = "users_data.json", bot_name: str = "spin_bot"):
    """
    –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ PostgreSQL.

    Args:
        json_file: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
        bot_name: –ò–º—è –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
    """
    print("=" * 60)
    print("–ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ò–ó JSON –í POSTGRESQL")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(json_file):
        print(f"‚ùå –§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
    print(f"\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {json_file}...")
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            old_data = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(old_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    print(f"\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return

    # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
    migrated_count = 0
    errors = []

    for telegram_id_str, data in old_data.items():
        try:
            telegram_id = int(telegram_id_str)
            session_data = data.get('session', {})
            stats_data = data.get('stats', {})

            async with get_session() as session:
                user_repo = UserRepository(session)
                session_repo = SessionRepository(session)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await user_repo.get_or_create(
                    telegram_id=telegram_id,
                    username=None,
                    first_name=None
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º XP –∏ level –∏–∑ stats
                total_xp = stats_data.get('total_xp', 0)
                current_level = stats_data.get('current_level', 1)
                total_trainings = stats_data.get('total_trainings', 0)
                total_score = stats_data.get('total_score', 0)

                # –û–±–Ω–æ–≤–ª—è–µ–º user
                user.total_xp = total_xp
                user.level = current_level
                user.total_trainings = total_trainings
                user.total_score = total_score

                await session.flush()

                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
                bot_session = await session_repo.get_or_create(
                    user_id=user.id,
                    bot_name=bot_name
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º session –∏ stats
                bot_session.session_data = session_data
                bot_session.stats_data = stats_data

                await session.flush()

            migrated_count += 1
            print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}: XP={total_xp}, Level={current_level}")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id_str}: {e}"
            errors.append(error_msg)
            print(f"  ‚ùå {error_msg}")

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–ò –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    if errors:
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
        print("\n–û—à–∏–±–∫–∏:")
        for error in errors:
            print(f"  - {error}")
    else:
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫!")

    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {json_file}")
    print(f"  - –ë–æ—Ç: {bot_name}")
    print(f"  - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}/{len(old_data)}")

    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_file = f"{json_file}.backup"
    try:
        import shutil
        shutil.copy(json_file, backup_file)
        print(f"\nüíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_file}")
    except Exception as e:
        print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: {e}")

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")


async def test_migration():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.
    """
    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 60)

    db_service = DatabaseService(bot_name="spin_bot")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with get_session() as session:
        user_repo = UserRepository(session)
        total_users = await user_repo.count_total_users()
        print(f"\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {total_users}")

        if total_users > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
            leaderboard = await user_repo.get_leaderboard(limit=5)
            print(f"\nüèÜ –¢–æ–ø-5 –ø–æ XP:")
            for i, user in enumerate(leaderboard, 1):
                print(f"  {i}. User {user.telegram_id}: {user.total_xp} XP, Level {user.level}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ JSON –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) > 1:
        json_file = sys.argv[1]
    else:
        json_file = "users_data.json"

    bot_name = os.getenv('BOT_NAME', 'spin_bot')

    print(f"\nü§ñ –ë–æ—Ç: {bot_name}")
    print(f"üìÇ JSON —Ñ–∞–π–ª: {json_file}\n")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    asyncio.run(migrate_json_to_db(json_file, bot_name))

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    asyncio.run(test_migration())


if __name__ == "__main__":
    main()
