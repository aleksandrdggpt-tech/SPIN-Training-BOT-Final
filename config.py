"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è SPIN Training Bot.
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
from typing import Optional


class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ .env
    BOT_TOKEN: str = os.getenv('BOT_TOKEN', '')
    OPENAI_API_KEY: str = os.getenv('OPENAI_API_KEY', '')
    ANTHROPIC_API_KEY: str = os.getenv('ANTHROPIC_API_KEY', '')
    # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã Telegram), —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ .env: ADMIN_USER_IDS=123,456
    _ADMIN_IDS_RAW: str = os.getenv('ADMIN_USER_IDS', '')
    ADMIN_USER_IDS = []
    if _ADMIN_IDS_RAW:
        try:
            ADMIN_USER_IDS = [int(x.strip()) for x in _ADMIN_IDS_RAW.split(',') if x.strip().isdigit()]
        except Exception:
            ADMIN_USER_IDS = []
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    SCENARIO_PATH: str = 'scenarios/spin_sales/config.json'
    PORT: int = 8080
    LLM_TIMEOUT_SEC: float = 30.0
    LLM_MAX_RETRIES: int = 1
    
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤ –∫–æ–¥–µ)
    # –û—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    RESPONSE_PRIMARY_PROVIDER: str = 'openai'
    RESPONSE_PRIMARY_MODEL: str = 'gpt-4o-mini'
    RESPONSE_FALLBACK_PROVIDER: str = 'anthropic'
    RESPONSE_FALLBACK_MODEL: str = 'claude-3-haiku-latest'
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    FEEDBACK_PRIMARY_PROVIDER: str = 'openai'
    FEEDBACK_PRIMARY_MODEL: str = 'gpt-5-mini'
    FEEDBACK_FALLBACK_PROVIDER: str = 'anthropic'
    FEEDBACK_FALLBACK_MODEL: str = 'claude-3-5-sonnet-latest'
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    CLASSIFICATION_PRIMARY_PROVIDER: str = 'openai'
    CLASSIFICATION_PRIMARY_MODEL: str = 'gpt-4o-mini'
    CLASSIFICATION_FALLBACK_PROVIDER: str = 'openai'
    CLASSIFICATION_FALLBACK_MODEL: str = 'gpt-4o-mini'
    
    @classmethod
    def validate(cls) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if not cls.OPENAI_API_KEY and not cls.ANTHROPIC_API_KEY:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á (OPENAI_API_KEY –∏–ª–∏ ANTHROPIC_API_KEY)")
    
    @classmethod
    def print_config(cls) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å–∫—Ä—ã–≤–∞–µ—Ç API –∫–ª—é—á–∏)."""
        print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print(f"  BOT_TOKEN: {cls._mask_token(cls.BOT_TOKEN)}")
        print(f"  OPENAI_API_KEY: {cls._mask_token(cls.OPENAI_API_KEY)}")
        print(f"  ANTHROPIC_API_KEY: {cls._mask_token(cls.ANTHROPIC_API_KEY)}")
        print(f"  SCENARIO_PATH: {cls.SCENARIO_PATH}")
        print(f"  PORT: {cls.PORT}")
        print(f"  LLM_TIMEOUT_SEC: {cls.LLM_TIMEOUT_SEC}")
        print(f"  LLM_MAX_RETRIES: {cls.LLM_MAX_RETRIES}")
        print(f"  RESPONSE_PROVIDER: {cls.RESPONSE_PRIMARY_PROVIDER} -> {cls.RESPONSE_FALLBACK_PROVIDER}")
        print(f"  FEEDBACK_PROVIDER: {cls.FEEDBACK_PRIMARY_PROVIDER} -> {cls.FEEDBACK_FALLBACK_PROVIDER}")
        print(f"  CLASSIFICATION_PROVIDER: {cls.CLASSIFICATION_PRIMARY_PROVIDER} -> {cls.CLASSIFICATION_FALLBACK_PROVIDER}")
    
    @staticmethod
    def _mask_token(token: str) -> str:
        """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
        if not token:
            return "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù"
        return f"{token[:20]}..." if len(token) > 20 else f"{token[:10]}..."


# –í–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –≤ main() –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
